{"version":3,"sources":["App.jsx","serviceWorker.js","index.js"],"names":["LinkCell","url","this","props","dataItem","field","react_default","a","createElement","className","href","target","rel","Component","DateCell","format","dateStr","App","_this","Object","classCallCheck","loading","possibleConstructorReturn","getPrototypeOf","call","state","data","launch_date","rocket_name","cargo_manifest","launch_success","launch_date_central","cargo_ranking","sort","title","fetchLaunches","then","launches","setState","fetch","resp","json","cargoRankings","i","length","launch","rocket","moment","launch_date_utc","tz","second_stage","payloads","push","reduce","total","payload","payload_mass_kg","b","_this2","main","orderBy","sortable","onSortChange","e","cell","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.feeadafe.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Grid, GridColumn } from '@progress/kendo-react-grid';\nimport { orderBy } from '@progress/kendo-data-query';\nimport * as moment from 'moment-timezone';\nimport 'whatwg-fetch'\n\nimport '@progress/kendo-theme-default/dist/all.css';\nimport './App.css';\n\n\nclass LinkCell extends Component {\n\n  render() {\n    let url = this.props.dataItem[this.props.field];\n    return <td className='link-cell'>\n      <a href={url} target='_blank' rel='noopener noreferrer'> {url} </a>\n    </td>;\n  }\n}\n\nclass DateCell extends Component {\n\n  render() {\n    let item = this.props.dataItem[this.props.field];\n    if (!item.format) {\n      return <td>item</td>;\n    }\n    let dateStr = this.props.dataItem[this.props.field].format('MMMM Do YYYY, h:mm:ss a');\n    return <td>{dateStr}</td>;\n  }\n\n}\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    const loading = \"Loading...\";\n    this.state = {\n      data: [\n        {\n          launch_date: loading, rocket_name: loading, cargo_manifest: loading, launch_success: loading,\n          launch_date_central: loading, cargo_ranking: loading\n        }\n      ],\n      sort: [],\n      title: \"SpaceX Launch Website\"\n    }\n\n    this.fetchLaunches().then( (launches) => { this.setState({data: launches}); } );\n  }\n\n  fetchLaunches(){\n    return fetch('https://api.spacexdata.com/v3/launches/past?sort=launch_date_utc&order=desc').then((resp) => {\n      return resp.json();\n    }).then((json) => {\n      let cargoRankings = [];\n      let launches = [];\n      for (let i = 0; i < json.length; i++) {\n        let launch = {};\n        launch.rocket_name = json[i].rocket.rocket_name;\n        launch.launch_date = moment.utc(json[i].launch_date_utc);\n        launch.launch_date_central = moment.utc(json[i].launch_date_utc).tz('America/Chicago');\n        launch.launch_success = json[i].launch_success ? 'Yes' : 'No';\n        if (json[i].rocket.second_stage.payloads) {\n          launch.cargo_manifest = json[i].rocket.second_stage.payloads[0].cargo_manifest\n          cargoRankings.push([i, json[i].rocket.second_stage.payloads.reduce((total, payload) => {\n            return total += (payload.payload_mass_kg || 0);\n          }, 0)]);\n        }\n        launches.push(launch);\n      }\n      cargoRankings.sort((a, b) => { return b[1] - a[1]; });\n      for (let i = 0; i < cargoRankings.length; i++) {\n        launches[cargoRankings[i][0]].cargo_ranking = i + 1;\n      }\n      return launches;\n    });\n  }\n\n  render() {\n    let sortChange = (e) => {\n      this.setState({\n        sort: e.sort\n      });\n    }\n    return (\n      <div className=\"App\">\n        <h1 className=\"App-title\">{this.state.title}</h1>\n        <Grid data={orderBy(this.state.data, this.state.sort)} sortable sort={this.state.sort} onSortChange={sortChange}>\n          <GridColumn field='launch_date' title=\"Launch Time (UTC)\" cell={DateCell} />\n          <GridColumn field='rocket_name' title=\"Rocket Name\" />\n          <GridColumn field=\"cargo_manifest\" title=\"Cargo Manifest\" cell={LinkCell} />\n          <GridColumn field=\"launch_success\" title=\"Launch Successful?\" />\n          <GridColumn field='launch_date_central' title=\"Launch Time (Central)\" cell={DateCell} />\n          <GridColumn field='cargo_ranking' title=\"Cargo Ranking\" />\n        </Grid>\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}